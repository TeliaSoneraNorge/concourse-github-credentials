// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telia-oss/concourse-github-lambda (interfaces: AppsManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	reflect "reflect"
)

// MockAppsManager is a mock of AppsManager interface
type MockAppsManager struct {
	ctrl     *gomock.Controller
	recorder *MockAppsManagerMockRecorder
}

// MockAppsManagerMockRecorder is the mock recorder for MockAppsManager
type MockAppsManagerMockRecorder struct {
	mock *MockAppsManager
}

// NewMockAppsManager creates a new mock instance
func NewMockAppsManager(ctrl *gomock.Controller) *MockAppsManager {
	mock := &MockAppsManager{ctrl: ctrl}
	mock.recorder = &MockAppsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppsManager) EXPECT() *MockAppsManagerMockRecorder {
	return m.recorder
}

// ListRepos mocks base method
func (m *MockAppsManager) ListRepos(arg0 context.Context, arg1 *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	ret := m.ctrl.Call(m, "ListRepos", arg0, arg1)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepos indicates an expected call of ListRepos
func (mr *MockAppsManagerMockRecorder) ListRepos(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepos", reflect.TypeOf((*MockAppsManager)(nil).ListRepos), arg0, arg1)
}
